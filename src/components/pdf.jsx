import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import 'jspdf-autotable';

// Constants for page layout
const PAGE_WIDTH = 210; // A4 width in mm
const PAGE_HEIGHT = 297; // A4 height in mm
const MARGIN = 10; // Margin for content

// Function to add a new page and reset Y position
const addNewPage = (doc, yPosition) => {
    doc.addPage();
    return MARGIN; // Reset Y position for the new page
};

// Function to add predefined images and title
const addHeader = (doc, title, yPosition) => {
    const schoolLogo = '/images/tup_logo.png'; // Replace with the actual path to your school logo
    const businessLogo = '/images/mdfc-logo4.png'; // Replace with the actual path to your business logo

    doc.addImage(schoolLogo, "PNG", MARGIN, yPosition, 30, 30); // Upper left image
    doc.addImage(businessLogo, "PNG", PAGE_WIDTH - 60, yPosition, 50, 30); // Upper right image
    yPosition += 40; // Adjust Y position after adding the images

    // Add title below the images
    doc.setFontSize(24);
    doc.setFont("helvetica", "bold");
    doc.setTextColor(33, 150, 243); // Blue color
    doc.text("MediFaceCare", PAGE_WIDTH / 2, yPosition, { align: "center" });
    yPosition += 20;

    // Add a subtitle
    doc.setFontSize(18);
    doc.setTextColor(0, 0, 0); // Black color
    doc.text(title, PAGE_WIDTH / 2, yPosition, { align: "center" });
    yPosition += 10;

    // Add a horizontal line below the subtitle
    doc.line(MARGIN, yPosition, PAGE_WIDTH - MARGIN, yPosition);
    yPosition += 10;

    return yPosition;
};

// Function to add "Prepared by" section
const addPreparedBy = (doc, yPosition) => {
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("Professor and Advisor: Pops Madriaga", MARGIN, yPosition);
    yPosition += 10;

    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("Prepared by:", MARGIN, yPosition);
    yPosition += 10;

    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    doc.setTextColor(50, 50, 50); // Dark gray color for names
    doc.text("Arnel V. Bullo Jr.", MARGIN + 10, yPosition); // Admin 1
    yPosition += 7;
    doc.text("Hanna Mae Bernolia", MARGIN + 10, yPosition); // Admin 2
    yPosition += 7;
    doc.text("Crisha Arlene Antonio", MARGIN + 10, yPosition); // Admin 3
    yPosition += 7;
    doc.text("Jeremiah Estillore", MARGIN + 10, yPosition); // Admin 4
    yPosition += 15; // Add extra space after the names

    // Add a horizontal line below the "Prepared by" section
    doc.line(MARGIN, yPosition, PAGE_WIDTH - MARGIN, yPosition);
    yPosition += 10;

    return yPosition;
};

// Function to add introduction text
const addIntroduction = (doc, introText, yPosition) => {
    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    doc.text(introText, MARGIN, yPosition, { maxWidth: PAGE_WIDTH - 2 * MARGIN });
    yPosition += 30;

    // Add a horizontal line below the introduction
    doc.line(MARGIN, yPosition, PAGE_WIDTH - MARGIN, yPosition);
    yPosition += 10;

    return yPosition;
};

// Function to add a footer
const addFooter = (doc) => {
    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100); // Gray color
    doc.text("Generated by MediFaceCare Analytics", PAGE_WIDTH / 2, PAGE_HEIGHT - 10, { align: "center" });
};

// Function to add a chart image with a border
const addChartImage = (doc, imageData, yPosition, chartHeight) => {
    const imageWidth = PAGE_WIDTH - 2 * MARGIN;
    const imageX = MARGIN;
    const imageY = yPosition;

    // Check if adding the chart will exceed the page height (considering footer space)
    if (imageY + chartHeight > PAGE_HEIGHT - 20) { // Leave 20mm space for the footer
        yPosition = addNewPage(doc, yPosition); // Add a new page and reset Y position
    }

    // Add the image
    doc.addImage(imageData, 'PNG', imageX, yPosition, imageWidth, chartHeight);

    // Add a border around the image
    doc.setDrawColor(0); // Black color for the border
    doc.setLineWidth(0.5); // Border width
    doc.rect(imageX, yPosition, imageWidth, chartHeight);

    return yPosition + chartHeight + 10; // Adjust Y position after adding the chart
};

// Function to generate PDF report for all charts
export const generatePDF = async (chartsData) => {
    const doc = new jsPDF();
    let yPosition = MARGIN;

    yPosition = addHeader(doc, "Data Analysis Report", yPosition);
    yPosition = addPreparedBy(doc, yPosition);
    yPosition = addIntroduction(doc, "This report provides an in-depth analysis of the data collected from the MediFaceCare application, including user demographics, image uploads, feedback, skincare routines, and medication usage.", yPosition);

    // Gender Distribution Analysis
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("Gender Distribution", MARGIN, yPosition);
    yPosition += 10;

    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    if (chartsData.maleCount === 0 && chartsData.femaleCount === 0) {
        doc.text("No gender data available.", MARGIN, yPosition);
        yPosition += 10;
    } else {
        const totalUsers = chartsData.maleCount + chartsData.femaleCount + chartsData.othersCount;
        const malePercentage = ((chartsData.maleCount / totalUsers) * 100).toFixed(2);
        const femalePercentage = ((chartsData.femaleCount / totalUsers) * 100).toFixed(2);
        const othersPercentage = ((chartsData.othersCount / totalUsers) * 100).toFixed(2);

        doc.text(`There are more ${chartsData.femaleCount > chartsData.maleCount ? 'females' : 'males'} who registered than ${chartsData.femaleCount > chartsData.maleCount ? 'males or other genders' : 'females or other genders'}.`, MARGIN, yPosition);
        yPosition += 10;
        doc.text(`Total males: ${chartsData.maleCount} (${malePercentage}%), Total females: ${chartsData.femaleCount} (${femalePercentage}%), Others: ${chartsData.othersCount} (${othersPercentage}%).`, MARGIN, yPosition);
        yPosition += 10;

        // Additional Analysis
        doc.text(`The gender distribution indicates that ${chartsData.femaleCount > chartsData.maleCount ? 'female' : 'male'} users are more engaged with the application. This could be due to ${chartsData.femaleCount > chartsData.maleCount ? 'women' : 'men'} being more proactive in skincare and health-related activities.`, MARGIN, yPosition, { maxWidth: PAGE_WIDTH - 2 * MARGIN });
        yPosition += 20;
    }

    // Capture the Gender Distribution Chart as an image
    const genderChartElement = document.querySelector('.gender-chart');
    if (genderChartElement) {
        const genderChartCanvas = await html2canvas(genderChartElement);
        const genderChartImage = genderChartCanvas.toDataURL('image/png');
        yPosition = addChartImage(doc, genderChartImage, yPosition, 80);
    }

    // Check if content exceeds the page height and add a new page
    if (yPosition > PAGE_HEIGHT - 50) {
        yPosition = addNewPage(doc, yPosition);
    }

    // Image Uploads Analysis
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("Image Uploads ", MARGIN, yPosition);
    yPosition += 10;

    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    if (chartsData.imageUploadData.length === 0) {
        doc.text("No image upload data available.", MARGIN, yPosition);
        yPosition += 10;
    } else {
        const maxUploads = Math.max(...chartsData.imageUploadData.map(entry => entry.count));
        const maxUploadDate = chartsData.imageUploadData.find(entry => entry.count === maxUploads)?.date;
        const totalUploads = chartsData.imageUploadData.reduce((acc, entry) => acc + entry.count, 0);
        const averageUploads = (totalUploads / chartsData.imageUploadData.length).toFixed(2);

        doc.text(`The highest number of image uploads (${maxUploads}) occurred on ${maxUploadDate}.`, MARGIN, yPosition);
        yPosition += 10;
        doc.text(`Average daily uploads: ${averageUploads}.`, MARGIN, yPosition);
        yPosition += 10;

        // Additional Analysis
        doc.text(`The peak in image uploads on ${maxUploadDate} suggests that users are more active on certain days, possibly due to specific events or promotions. The average daily uploads indicate consistent user engagement with the application.`, MARGIN, yPosition, { maxWidth: PAGE_WIDTH - 2 * MARGIN });
        yPosition += 20;
    }

    // Capture the Image Uploads Chart as an image
    const imageUploadChartElement = document.querySelector('.image-upload-chart');
    if (imageUploadChartElement) {
        const imageUploadChartCanvas = await html2canvas(imageUploadChartElement);
        const imageUploadChartImage = imageUploadChartCanvas.toDataURL('image/png');
        yPosition = addChartImage(doc, imageUploadChartImage, yPosition, 80);
    }

    // Check if content exceeds the page height and add a new page
    if (yPosition > PAGE_HEIGHT - 50) {
        yPosition = addNewPage(doc, yPosition);
    }

    // Feedback Analysis
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("Feedback Analysis", MARGIN, yPosition);
    yPosition += 10;

    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    if (chartsData.dailyFeedbackChartData.length === 0) {
        doc.text("No feedback data available.", MARGIN, yPosition);
        yPosition += 10;
    } else {
        const maxFeedback = Math.max(...chartsData.dailyFeedbackChartData.map(entry => entry.count));
        const maxFeedbackDate = chartsData.dailyFeedbackChartData.find(entry => entry.count === maxFeedback)?.date;
        const totalFeedback = chartsData.dailyFeedbackChartData.reduce((acc, entry) => acc + entry.count, 0);
        const averageFeedback = (totalFeedback / chartsData.dailyFeedbackChartData.length).toFixed(2);

        doc.text(`The highest number of feedback submissions (${maxFeedback}) occurred on ${maxFeedbackDate}.`, MARGIN, yPosition);
        yPosition += 10;
        doc.text(`Average daily feedback: ${averageFeedback}.`, MARGIN, yPosition);
        yPosition += 10;

        // Additional Analysis
        doc.text(`The spike in feedback on ${maxFeedbackDate} could indicate a significant event or update in the application that prompted users to share their opinions. The average daily feedback shows that users are actively engaging with the feedback system.`, MARGIN, yPosition, { maxWidth: PAGE_WIDTH - 2 * MARGIN });
        yPosition += 20;
    }

    // Capture the Feedback Chart as an image
    const feedbackChartElement = document.querySelector('.feedback-chart');
    if (feedbackChartElement) {
        const feedbackChartCanvas = await html2canvas(feedbackChartElement);
        const feedbackChartImage = feedbackChartCanvas.toDataURL('image/png');
        yPosition = addChartImage(doc, feedbackChartImage, yPosition, 80);
    }

    // Check if content exceeds the page height and add a new page
    if (yPosition > PAGE_HEIGHT - 50) {
        yPosition = addNewPage(doc, yPosition);
    }

    // Skincare Routines Analysis
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("Skincare Routines", MARGIN, yPosition);
    yPosition += 10;

    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    if (chartsData.skincareRoutineChartData.length === 0) {
        doc.text("No skincare routine data available.", MARGIN, yPosition);
        yPosition += 10;
    } else {
        const maxRoutines = Math.max(...chartsData.skincareRoutineChartData.map(entry => entry.count));
        const maxRoutineDate = chartsData.skincareRoutineChartData.find(entry => entry.count === maxRoutines)?.date;
        const totalRoutines = chartsData.skincareRoutineChartData.reduce((acc, entry) => acc + entry.count, 0);
        const averageRoutines = (totalRoutines / chartsData.skincareRoutineChartData.length).toFixed(2);

        doc.text(`The highest number of skincare routines saved (${maxRoutines}) occurred on ${maxRoutineDate}.`, MARGIN, yPosition);
        yPosition += 10;
        doc.text(`Average daily routines: ${averageRoutines}.`, MARGIN, yPosition);
        yPosition += 10;

        // Additional Analysis
        doc.text(`The peak in skincare routines on ${maxRoutineDate} suggests that users are more likely to save routines during specific periods, possibly due to seasonal changes or promotional events. The average daily routines indicate a steady interest in personalized skincare.`, MARGIN, yPosition, { maxWidth: PAGE_WIDTH - 2 * MARGIN });
        yPosition += 20;
    }

    // Capture the Skincare Routines Chart as an image
    const skincareRoutineChartElement = document.querySelector('.skincare-routine-chart');
    if (skincareRoutineChartElement) {
        const skincareRoutineChartCanvas = await html2canvas(skincareRoutineChartElement);
        const skincareRoutineChartImage = skincareRoutineChartCanvas.toDataURL('image/png');
        yPosition = addChartImage(doc, skincareRoutineChartImage, yPosition, 80);
    }

    // Check if content exceeds the page height and add a new page
    if (yPosition > PAGE_HEIGHT - 50) {
        yPosition = addNewPage(doc, yPosition);
    }

    // Medications Analysis
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("Medications", MARGIN, yPosition);
    yPosition += 10;

    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    if (chartsData.medicationChartData.length === 0) {
        doc.text("No medication data available.", MARGIN, yPosition);
        yPosition += 10;
    } else {
        const maxMedications = Math.max(...chartsData.medicationChartData.map(entry => entry.count));
        const maxMedicationDate = chartsData.medicationChartData.find(entry => entry.count === maxMedications)?.date;
        const totalMedications = chartsData.medicationChartData.reduce((acc, entry) => acc + entry.count, 0);
        const averageMedications = (totalMedications / chartsData.medicationChartData.length).toFixed(2);

        doc.text(`The highest number of medications saved (${maxMedications}) occurred on ${maxMedicationDate}.`, MARGIN, yPosition);
        yPosition += 10;
        doc.text(`Average daily medications: ${averageMedications}.`, MARGIN, yPosition);
        yPosition += 10;

        // Additional Analysis
        doc.text(`The peak in medication saves on ${maxMedicationDate} could be due to a specific health campaign or reminder system within the application. The average daily medications indicate a consistent need for medication management among users.`, MARGIN, yPosition, { maxWidth: PAGE_WIDTH - 2 * MARGIN });
        yPosition += 20;
    }

    // Capture the Medications Chart as an image
    const medicationChartElement = document.querySelector('.medication-chart');
    if (medicationChartElement) {
        const medicationChartCanvas = await html2canvas(medicationChartElement);
        const medicationChartImage = medicationChartCanvas.toDataURL('image/png');
        yPosition = addChartImage(doc, medicationChartImage, yPosition, 80);
    }

    // Check if content exceeds the page height and add a new page
    if (yPosition > PAGE_HEIGHT - 50) {
        yPosition = addNewPage(doc, yPosition);
    }

    // Saved Skin Analysis Daily
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("Saved Skin Analysis Daily", MARGIN, yPosition);
    yPosition += 10;

    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    if (chartsData.dailyAnalysisChartData.length === 0) {
        doc.text("No skin analysis data available.", MARGIN, yPosition);
        yPosition += 10;
    } else {
        const maxAnalysis = Math.max(...chartsData.dailyAnalysisChartData.map(entry => entry.count));
        const maxAnalysisDate = chartsData.dailyAnalysisChartData.find(entry => entry.count === maxAnalysis)?.date;
        const totalAnalysis = chartsData.dailyAnalysisChartData.reduce((acc, entry) => acc + entry.count, 0);
        const averageAnalysis = (totalAnalysis / chartsData.dailyAnalysisChartData.length).toFixed(2);

        doc.text(`The highest number of skin analysis saved (${maxAnalysis}) occurred on ${maxAnalysisDate}.`, MARGIN, yPosition);
        yPosition += 10;
        doc.text(`Average daily analysis: ${averageAnalysis}.`, MARGIN, yPosition);
        yPosition += 10;

        // Additional Analysis
        doc.text(`The peak in skin analysis on ${maxAnalysisDate} suggests that users are more likely to analyze their skin during specific periods, possibly due to seasonal changes or promotional events. The average daily analysis indicates a steady interest in skin health monitoring.`, MARGIN, yPosition, { maxWidth: PAGE_WIDTH - 2 * MARGIN });
        yPosition += 20;
    }

    // Capture the Saved Skin Analysis Chart as an image
    const dailyAnalysisChartElement = document.querySelector('.daily-analysis-chart');
    if (dailyAnalysisChartElement) {
        const dailyAnalysisChartCanvas = await html2canvas(dailyAnalysisChartElement);
        const dailyAnalysisChartImage = dailyAnalysisChartCanvas.toDataURL('image/png');
        yPosition = addChartImage(doc, dailyAnalysisChartImage, yPosition, 80);
    }

    // Check if content exceeds the page height and add a new page
    if (yPosition > PAGE_HEIGHT - 50) {
        yPosition = addNewPage(doc, yPosition);
    }

    // Analysis Section
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("Analysis and Recommendations", MARGIN, yPosition);
    yPosition += 10;

    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    const totalUsers = chartsData.maleCount + chartsData.femaleCount + chartsData.othersCount;
    const malePercentage = ((chartsData.maleCount / totalUsers) * 100).toFixed(2);
    const femalePercentage = ((chartsData.femaleCount / totalUsers) * 100).toFixed(2);
    const othersPercentage = ((chartsData.othersCount / totalUsers) * 100).toFixed(2);

    doc.text(`Based on the data collected, ${chartsData.femaleCount > chartsData.maleCount ? 'females' : 'males'} make up the majority of registered users at ${chartsData.femaleCount > chartsData.maleCount ? femalePercentage : malePercentage}%. This indicates a higher engagement from ${chartsData.femaleCount > chartsData.maleCount ? 'female' : 'male'} users in skincare and health-related activities.`, MARGIN, yPosition, { maxWidth: PAGE_WIDTH - 2 * MARGIN });
    yPosition += 20;

    const totalUploads = chartsData.imageUploadData.reduce((acc, entry) => acc + entry.count, 0);
    const averageUploads = (totalUploads / chartsData.imageUploadData.length).toFixed(2);
    const maxUploads = Math.max(...chartsData.imageUploadData.map(entry => entry.count));
    const maxUploadDate = chartsData.imageUploadData.find(entry => entry.count === maxUploads)?.date;

    doc.text(`The daily saved skin analysis data shows an average of ${averageUploads} uploads per day, with a peak of ${maxUploads} uploads on ${maxUploadDate}. This suggests that users are actively monitoring their skin health.`, MARGIN, yPosition, { maxWidth: PAGE_WIDTH - 2 * MARGIN });
    yPosition += 20;

    const totalRoutines = chartsData.skincareRoutineChartData.reduce((acc, entry) => acc + entry.count, 0);
    const averageRoutines = (totalRoutines / chartsData.skincareRoutineChartData.length).toFixed(2);
    const maxRoutines = Math.max(...chartsData.skincareRoutineChartData.map(entry => entry.count));
    const maxRoutineDate = chartsData.skincareRoutineChartData.find(entry => entry.count === maxRoutines)?.date;

    doc.text(`The saved skincare routines data indicates an average of ${averageRoutines} routines saved daily, with a peak of ${maxRoutines} routines on ${maxRoutineDate}. This highlights the importance of personalized skincare routines for users.`, MARGIN, yPosition, { maxWidth: PAGE_WIDTH - 2 * MARGIN });
    yPosition += 20;

    const totalMedications = chartsData.medicationChartData.reduce((acc, entry) => acc + entry.count, 0);
    const averageMedications = (totalMedications / chartsData.medicationChartData.length).toFixed(2);
    const maxMedications = Math.max(...chartsData.medicationChartData.map(entry => entry.count));
    const maxMedicationDate = chartsData.medicationChartData.find(entry => entry.count === maxMedications)?.date;

    doc.text(`The saved medications data shows an average of ${averageMedications} medications saved daily, with a peak of ${maxMedications} medications on ${maxMedicationDate}. This indicates a significant reliance on medication management within the user base.`, MARGIN, yPosition, { maxWidth: PAGE_WIDTH - 2 * MARGIN });
    yPosition += 20;

    // Recommendations Table
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("Recommendations for Skin Improvement and Medication Management", MARGIN, yPosition);
    yPosition += 10;

    const recommendations = [
        { "Skin Type": "Dry", "Recommendation": "Use a hydrating moisturizer and avoid harsh cleansers.", "Medication": "Topical corticosteroids for severe dryness." },
        { "Skin Type": "Oily", "Recommendation": "Use oil-free products and exfoliate regularly.", "Medication": "Retinoids to control oil production." },
        { "Skin Type": "Combination", "Recommendation": "Use a balanced skincare routine targeting both dry and oily areas.", "Medication": "Salicylic acid for acne-prone areas." },
        { "Skin Type": "Sensitive", "Recommendation": "Use fragrance-free and hypoallergenic products.", "Medication": "Antihistamines for allergic reactions." },
        { "Skin Type": "Aging", "Recommendation": "Use anti-aging products with retinol and hyaluronic acid.", "Medication": "Prescription retinoids for fine lines and wrinkles." },
        { "Skin Type": "Acne-Prone", "Recommendation": "Use non-comedogenic products and avoid heavy oils.", "Medication": "Benzoyl peroxide or antibiotics for acne treatment." },
        { "Skin Type": "Normal", "Recommendation": "Maintain a balanced skincare routine with gentle products.", "Medication": "No specific medication required." }
    ];

    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    doc.autoTable({
        startY: yPosition,
        head: [["Skin Type", "Recommendation", "Medication"]],
        body: recommendations.map(rec => [rec["Skin Type"], rec["Recommendation"], rec["Medication"]]),
        margin: { left: MARGIN, right: MARGIN },
        theme: 'striped',
        styles: { fontSize: 10, cellPadding: 3 },
        headStyles: { fillColor: [33, 150, 243], textColor: [255, 255, 255], fontStyle: 'bold' }
    });

    yPosition = doc.autoTable.previous.finalY + 10;

    // Add a footer
    addFooter(doc);

    // Save the PDF
    doc.save("MediFaceCare_Data_Analysis_Report.pdf");
};

// Function to generate PDF report for Gender Distribution Chart
export const generateGenderPDF = async (maleCount, femaleCount, othersCount) => {
    const doc = new jsPDF();
    let yPosition = MARGIN;

    yPosition = addHeader(doc, "Gender Distribution Report", yPosition);
    yPosition = addPreparedBy(doc, yPosition);
    yPosition = addIntroduction(doc, "This report provides an analysis of the gender distribution among registered users in the MediFaceCare application.", yPosition);

    // Gender Distribution Analysis
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("Gender Distribution", MARGIN, yPosition);
    yPosition += 10;

    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    if (maleCount === 0 && femaleCount === 0) {
        doc.text("No gender data available.", MARGIN, yPosition);
        yPosition += 10;
    } else {
        const totalUsers = maleCount + femaleCount + othersCount;
        const malePercentage = ((maleCount / totalUsers) * 100).toFixed(2);
        const femalePercentage = ((femaleCount / totalUsers) * 100).toFixed(2);
        const othersPercentage = ((othersCount / totalUsers) * 100).toFixed(2);

        doc.text(`There are more ${femaleCount > maleCount ? 'females' : 'males'} who registered than ${femaleCount > maleCount ? 'males or other genders' : 'females or other genders'}.`, MARGIN, yPosition);
        yPosition += 10;
        doc.text(`Total males: ${maleCount} (${malePercentage}%), Total females: ${femaleCount} (${femalePercentage}%), Others: ${othersCount} (${othersPercentage}%).`, MARGIN, yPosition);
        yPosition += 10;

        // Additional Analysis
        doc.text(`The gender distribution indicates that ${femaleCount > maleCount ? 'female' : 'male'} users are more engaged with the application. This could be due to ${femaleCount > maleCount ? 'women' : 'men'} being more proactive in skincare and health-related activities.`, MARGIN, yPosition, { maxWidth: PAGE_WIDTH - 2 * MARGIN });
        yPosition += 20;
    }

    // Capture the Gender Distribution Chart as an image
    const genderChartElement = document.querySelector('.gender-chart');
    if (genderChartElement) {
        const genderChartCanvas = await html2canvas(genderChartElement);
        const genderChartImage = genderChartCanvas.toDataURL('image/png');
        yPosition = addChartImage(doc, genderChartImage, yPosition, 80);
    }

    // Add a footer
    addFooter(doc);

    // Save the PDF
    doc.save("Gender_Distribution_Report.pdf");
};

// Function to generate PDF report for Image Uploads Chart
export const generateImageUploadPDF = async (imageUploadData) => {
    const doc = new jsPDF();
    let yPosition = MARGIN;

    yPosition = addHeader(doc, "Image Uploads Report", yPosition);
    yPosition = addPreparedBy(doc, yPosition);
    yPosition = addIntroduction(doc, "This report provides an analysis of the image uploads in the MediFaceCare application.", yPosition);

    // Image Uploads Analysis
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("Image Uploads Analysis", MARGIN, yPosition);
    yPosition += 10;

    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    if (imageUploadData.length === 0) {
        doc.text("No image upload data available.", MARGIN, yPosition);
        yPosition += 10;
    } else {
        const maxUploads = Math.max(...imageUploadData.map(entry => entry.count));
        const maxUploadDate = imageUploadData.find(entry => entry.count === maxUploads)?.date;
        const totalUploads = imageUploadData.reduce((acc, entry) => acc + entry.count, 0);
        const averageUploads = (totalUploads / imageUploadData.length).toFixed(2);

        doc.text(`The highest number of image uploads (${maxUploads}) occurred on ${maxUploadDate}.`, MARGIN, yPosition);
        yPosition += 10;
        doc.text(`Average daily uploads: ${averageUploads}.`, MARGIN, yPosition);
        yPosition += 10;

        // Additional Analysis
        doc.text(`The peak in image uploads on ${maxUploadDate} suggests that users are more active on certain days, possibly due to specific events or promotions. The average daily uploads indicate consistent user engagement with the application.`, MARGIN, yPosition, { maxWidth: PAGE_WIDTH - 2 * MARGIN });
        yPosition += 20;
    }

    // Capture the Image Uploads Chart as an image
    const imageUploadChartElement = document.querySelector('.image-upload-chart');
    if (imageUploadChartElement) {
        const imageUploadChartCanvas = await html2canvas(imageUploadChartElement);
        const imageUploadChartImage = imageUploadChartCanvas.toDataURL('image/png');
        yPosition = addChartImage(doc, imageUploadChartImage, yPosition, 80);
    }

    // Add a footer
    addFooter(doc);

    // Save the PDF
    doc.save("Image_Uploads_Report.pdf");
};

// Function to generate PDF report for Feedback Chart
export const generateFeedbackPDF = async (dailyFeedbackChartData) => {
    const doc = new jsPDF();
    let yPosition = MARGIN;

    yPosition = addHeader(doc, "Feedback Report", yPosition);
    yPosition = addPreparedBy(doc, yPosition);
    yPosition = addIntroduction(doc, "This report provides an analysis of the feedback submissions in the MediFaceCare application.", yPosition);

    // Feedback Analysis
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("Feedback", MARGIN, yPosition);
    yPosition += 10;

    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    if (dailyFeedbackChartData.length === 0) {
        doc.text("No feedback data available.", MARGIN, yPosition);
        yPosition += 10;
    } else {
        const maxFeedback = Math.max(...dailyFeedbackChartData.map(entry => entry.count));
        const maxFeedbackDate = dailyFeedbackChartData.find(entry => entry.count === maxFeedback)?.date;
        const totalFeedback = dailyFeedbackChartData.reduce((acc, entry) => acc + entry.count, 0);
        const averageFeedback = (totalFeedback / dailyFeedbackChartData.length).toFixed(2);

        doc.text(`The highest number of feedback submissions (${maxFeedback}) occurred on ${maxFeedbackDate}.`, MARGIN, yPosition);
        yPosition += 10;
        doc.text(`Average daily feedback: ${averageFeedback}.`, MARGIN, yPosition);
        yPosition += 10;

        // Additional Analysis
        doc.text(`The spike in feedback on ${maxFeedbackDate} could indicate a significant event or update in the application that prompted users to share their opinions. The average daily feedback shows that users are actively engaging with the feedback system.`, MARGIN, yPosition, { maxWidth: PAGE_WIDTH - 2 * MARGIN });
        yPosition += 20;
    }

    // Capture the Feedback Chart as an image
    const feedbackChartElement = document.querySelector('.feedback-chart');
    if (feedbackChartElement) {
        const feedbackChartCanvas = await html2canvas(feedbackChartElement);
        const feedbackChartImage = feedbackChartCanvas.toDataURL('image/png');
        yPosition = addChartImage(doc, feedbackChartImage, yPosition, 80);
    }

    // Add a footer
    addFooter(doc);

    // Save the PDF
    doc.save("Feedback_Report.pdf");
};

// Function to generate PDF report for Skincare Routines Chart
export const generateSkincareRoutinePDF = async (skincareRoutineChartData) => {
    const doc = new jsPDF();
    let yPosition = MARGIN;

    yPosition = addHeader(doc, "Skincare Routines Report", yPosition);
    yPosition = addPreparedBy(doc, yPosition);
    yPosition = addIntroduction(doc, "This report provides an analysis of the skincare routines saved in the MediFaceCare application.", yPosition);

    // Skincare Routines Analysis
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("Skincare Routines Analysis", MARGIN, yPosition);
    yPosition += 10;

    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    if (skincareRoutineChartData.length === 0) {
        doc.text("No skincare routine data available.", MARGIN, yPosition);
        yPosition += 10;
    } else {
        const maxRoutines = Math.max(...skincareRoutineChartData.map(entry => entry.count));
        const maxRoutineDate = skincareRoutineChartData.find(entry => entry.count === maxRoutines)?.date;
        const totalRoutines = skincareRoutineChartData.reduce((acc, entry) => acc + entry.count, 0);
        const averageRoutines = (totalRoutines / skincareRoutineChartData.length).toFixed(2);

        doc.text(`The highest number of skincare routines saved (${maxRoutines}) occurred on ${maxRoutineDate}.`, MARGIN, yPosition);
        yPosition += 10;
        doc.text(`Average daily routines: ${averageRoutines}.`, MARGIN, yPosition);
        yPosition += 10;

        // Additional Analysis
        doc.text(`The peak in skincare routines on ${maxRoutineDate} suggests that users are more likely to save routines during specific periods, possibly due to seasonal changes or promotional events. The average daily routines indicate a steady interest in personalized skincare.`, MARGIN, yPosition, { maxWidth: PAGE_WIDTH - 2 * MARGIN });
        yPosition += 20;
    }

    // Capture the Skincare Routines Chart as an image
    const skincareRoutineChartElement = document.querySelector('.skincare-routine-chart');
    if (skincareRoutineChartElement) {
        const skincareRoutineChartCanvas = await html2canvas(skincareRoutineChartElement);
        const skincareRoutineChartImage = skincareRoutineChartCanvas.toDataURL('image/png');
        yPosition = addChartImage(doc, skincareRoutineChartImage, yPosition, 80);
    }

    // Add a footer
    addFooter(doc);

    // Save the PDF
    doc.save("Skincare_Routines_Report.pdf");
};

// Function to generate PDF report for Medications Chart
export const generateMedicationPDF = async (medicationChartData) => {
    const doc = new jsPDF();
    let yPosition = MARGIN;

    yPosition = addHeader(doc, "Medications Report", yPosition);
    yPosition = addPreparedBy(doc, yPosition);
    yPosition = addIntroduction(doc, "This report provides an analysis of the medications saved in the MediFaceCare application.", yPosition);

    // Medications Analysis
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("Medications Analysis", MARGIN, yPosition);
    yPosition += 10;

    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    if (medicationChartData.length === 0) {
        doc.text("No medication data available.", MARGIN, yPosition);
        yPosition += 10;
    } else {
        const maxMedications = Math.max(...medicationChartData.map(entry => entry.count));
        const maxMedicationDate = medicationChartData.find(entry => entry.count === maxMedications)?.date;
        const totalMedications = medicationChartData.reduce((acc, entry) => acc + entry.count, 0);
        const averageMedications = (totalMedications / medicationChartData.length).toFixed(2);

        doc.text(`The highest number of medications saved (${maxMedications}) occurred on ${maxMedicationDate}.`, MARGIN, yPosition);
        yPosition += 10;
        doc.text(`Average daily medications: ${averageMedications}.`, MARGIN, yPosition);
        yPosition += 10;

        // Additional Analysis
        doc.text(`The peak in medication saves on ${maxMedicationDate} could be due to a specific health campaign or reminder system within the application. The average daily medications indicate a consistent need for medication management among users.`, MARGIN, yPosition, { maxWidth: PAGE_WIDTH - 2 * MARGIN });
        yPosition += 20;
    }

    // Capture the Medications Chart as an image
    const medicationChartElement = document.querySelector('.medication-chart');
    if (medicationChartElement) {
        const medicationChartCanvas = await html2canvas(medicationChartElement);
        const medicationChartImage = medicationChartCanvas.toDataURL('image/png');
        yPosition = addChartImage(doc, medicationChartImage, yPosition, 80);
    }

    // Add a footer
    addFooter(doc);

    // Save the PDF
    doc.save("Medications_Report.pdf");
};

// Function to generate PDF report for Saved Skin Analysis Daily
export const generateDailyAnalysisPDF = async (dailyAnalysisChartData) => {
    const doc = new jsPDF();
    let yPosition = MARGIN;

    yPosition = addHeader(doc, "Saved Skin Analysis Daily Report", yPosition);
    yPosition = addPreparedBy(doc, yPosition);
    yPosition = addIntroduction(doc, "This report provides an analysis of the daily saved skin analysis in the MediFaceCare application.", yPosition);

    // Saved Skin Analysis Daily Analysis
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("Saved Skin Analysis Daily", MARGIN, yPosition);
    yPosition += 10;

    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    if (dailyAnalysisChartData.length === 0) {
        doc.text("No skin analysis data available.", MARGIN, yPosition);
        yPosition += 10;
    } else {
        const maxAnalysis = Math.max(...dailyAnalysisChartData.map(entry => entry.count));
        const maxAnalysisDate = dailyAnalysisChartData.find(entry => entry.count === maxAnalysis)?.date;
        const totalAnalysis = dailyAnalysisChartData.reduce((acc, entry) => acc + entry.count, 0);
        const averageAnalysis = (totalAnalysis / dailyAnalysisChartData.length).toFixed(2);

        doc.text(`The highest number of skin analysis saved (${maxAnalysis}) occurred on ${maxAnalysisDate}.`, MARGIN, yPosition);
        yPosition += 10;
        doc.text(`Average daily analysis: ${averageAnalysis}.`, MARGIN, yPosition);
        yPosition += 10;

        // Additional Analysis
        doc.text(`The peak in skin analysis on ${maxAnalysisDate} suggests that users are more likely to analyze their skin during specific periods, possibly due to seasonal changes or promotional events. The average daily analysis indicates a steady interest in skin health monitoring.`, MARGIN, yPosition, { maxWidth: PAGE_WIDTH - 2 * MARGIN });
        yPosition += 20;
    }

    // Capture the Saved Skin Analysis Chart as an image
    const dailyAnalysisChartElement = document.querySelector('.daily-analysis-chart');
    if (dailyAnalysisChartElement) {
        const dailyAnalysisChartCanvas = await html2canvas(dailyAnalysisChartElement);
        const dailyAnalysisChartImage = dailyAnalysisChartCanvas.toDataURL('image/png');
        yPosition = addChartImage(doc, dailyAnalysisChartImage, yPosition, 80);
    }

    // Add a footer
    addFooter(doc);

    // Save the PDF
    doc.save("Saved_Skin_Analysis_Daily_Report.pdf");
};

// Function to generate PDF report for User Emails Chart
export const generateUserEmailPDF = async (userEmailData) => {
    const doc = new jsPDF();
    let yPosition = MARGIN;

    yPosition = addHeader(doc, "User Emails Report", yPosition);
    yPosition = addPreparedBy(doc, yPosition);
    yPosition = addIntroduction(doc, "This report provides an analysis of the user emails registered in the MediFaceCare application.", yPosition);

    // User Emails Analysis
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("User Emails Analysis", MARGIN, yPosition);
    yPosition += 10;

    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    if (userEmailData.length === 0) {
        doc.text("No user email data available.", MARGIN, yPosition);
        yPosition += 10;
    } else {
        doc.text(`Total users: ${userEmailData.length}.`, MARGIN, yPosition);
        yPosition += 10;

        // Additional Analysis
        doc.text(`The total number of registered users indicates the reach of the application. Further analysis could be done to segment users based on demographics or engagement levels.`, MARGIN, yPosition, { maxWidth: PAGE_WIDTH - 2 * MARGIN });
        yPosition += 20;
    }

    // Capture the User Emails Chart as an image
    const userEmailChartElement = document.querySelector('.user-email-chart');
    if (userEmailChartElement) {
        const userEmailChartCanvas = await html2canvas(userEmailChartElement);
        const userEmailChartImage = userEmailChartCanvas.toDataURL('image/png');
        yPosition = addChartImage(doc, userEmailChartImage, yPosition, 80);
    }

    // Add a footer
    addFooter(doc);

    // Save the PDF
    doc.save("User_Emails_Report.pdf");
};